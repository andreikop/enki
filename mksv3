#!/usr/bin/env python
"""
mksv3. Code editor
Main file processes command line arguments, checks dependencies and starts the system.
"""

import sys
import os.path
import traceback
import logging
import logging.handlers

from optparse import OptionParser  # Replace with argparse, when python 2.6 is not supported

import mks.core.defines

class _StartProfiler:
    def __init__(self):
        self._steps = []
        from datetime import datetime
        self._importedDateTime = datetime
        self._startTime = datetime.now()

    def stepDone(self, description):
        self._steps.append((description, self._importedDateTime.now()))

    def printInfo(self):
        prev = self._startTime
        totalMs = 0
        for description, time in self._steps:
            diffMs = (time - prev).microseconds / 1000
            totalMs += diffMs
            prev = time
            print '%s: %d' % (description.ljust(30), diffMs)
        print 'Total                         : %d' % totalMs

def excepthook(excepttype, exceptvalue, tracebackobj):
    """Show exception dialog, write to log
    """
    text = ''.join(traceback.format_exception(excepttype, exceptvalue, tracebackobj)).strip()
    text = unicode(text, 'utf8')
    logging.critical(text)
    
    mailto = '<a href="mailto:mksv3-bugs@googlegroups.com?subject=Crash&body=asdf">' \
                'mailto:mksv3-bugs@googlegroups.com</a>'
    
    mboxText =  '<html>' + \
                'Exception occured.<br/>' + \
                'MkS team tries to avoid such problems and make mksv3 stable<br/>' + \
                'To help us <font color="red">send please a bug report to the developers</font><br/>' + \
                mailto + '<br/>' + \
                '<br/>' + \
                'Include your description and this text:<br/>' + \
                '<br/>' + \
                text.replace('\n', '<br/>\n') + \
                '</html>'

    from PyQt4.QtGui import QMessageBox
    from mks.core.core import core
    QMessageBox.critical(core.mainWindow(), 'Oops. Internal exception', mboxText)

def _showErrorMessage(haveQt, header, html, plain):
    """Show error message with messagebox
    """
    print >> sys.stderr, header
    print >> sys.stderr, plain
    if haveQt:
        from PyQt4.QtGui import QApplication, QMessageBox
        app = QApplication ( sys.argv )
        QMessageBox.critical(None, header, html)
    else:
        try:
            import tkMessageBox
        except ImportError:
            return
        tkMessageBox.showwarning(header, plain)


def _checkDependencies(profiler):
    """Check if 3rdparty software is installed in the system.
    Notify user, how to install it
    """
    _SEE_SITE_PLAIN = 'See https://github.com/hlamer/mksv3/wiki/source-installation-instructions'
    _SEE_SITE_HTML = \
        'See <a href="https://github.com/hlamer/mksv3/wiki/source-installation-instructions">' \
            'installation instructions</a>'

    try:
        import PyQt4
    except ImportError, ex:
        plain =  'Failed to import Qt4 python bindings:\n' + \
                 str(ex) + '\n' + \
                 _SEE_SITE_PLAIN
        
        _showErrorMessage(False, 'PyQt4 not found', plain, plain)
        raise ex
    
    import sip
    sip.setapi('QString', 2)

    if profiler is not None:
        profiler.stepDone('Import PyQt4')

    try:
        import PyQt4.Qsci
    except ImportError, ex:
        html = "<html>" + \
                    "Failed to import QScintilla 2 python bindings:<br/>" + \
                    str(ex) + '<br/>' + \
                    _SEE_SITE_HTML + \
                "</html>"
        plain = "Failed to import QScintilla 2 python bindings:\n" + \
                str(ex) + '\n' + \
                _SEE_SITE_PLAIN
        _showErrorMessage(True, "QScintilla not found", html, plain)
        raise ex

    if profiler is not None:
        profiler.stepDone('Import QScintilla')

def _parseCommandLine():
    parser = OptionParser(usage="%prog [options] [FILE [+LINE_NUMBER_TO_GO] .. [FILE]]]",
                          version="%prog " + mks.core.defines.PACKAGE_VERSION)
    
    parser.add_option("-n", "--no-session", dest="no_session", action="store_true",
                      help="Do not restore session")

    parser.add_option("-p", "--profile", dest="profile", action="store_true",
                      help="profile initialization and exit. For developers")

    (options, args) = parser.parse_args()
    
    cmdLine = {"profile" : options.profile,
               "no-session" : options.no_session}

    # Parse +N spec.
    plusNSpecs = filter(lambda s: s.startswith('+'), args)
    files = filter(lambda s: not s.startswith('+'), args)

    if plusNSpecs:
        if len(plusNSpecs) > 1:
            print >> sys.stderr, "Only one +N spec are allowed"
            sys.exit(-1)
        spec = plusNSpecs[0]
        try:
            cmdLine["firstFileLineToGo"] = int(spec[1:])
        except ValueError:
            print >> sys.stderr, "Invalid +N spec value: '%s'" % spec
            sys.exit(-1)

    
    # Get list of absolute pathes of files to open. List may contain not existing files
    filePathes = [os.path.abspath(arg) for arg in files]
    # convert to unicode for avoid Python <-> Qt interaction problems
    filePathes = [unicode(f, 'utf8') for f in filePathes]
    cmdLine["files"] = filePathes
    
    return cmdLine

def main():
    
    cmdLine = _parseCommandLine()
    
    if cmdLine["profile"]:
        profiler = _StartProfiler()
    else:
        profiler = None

    try:
        _checkDependencies(profiler)
    except ImportError:
        sys.exit(-1)
    
    # Imports only here. Hack for ability to get help and version info even on system without PyQt.
    import PyQt4.QtGui
    
    if profiler is not None:
        profiler.stepDone('Import modules')
    
    logging.basicConfig(level=logging.ERROR)
    
    sys.excepthook = excepthook
    
    app = PyQt4.QtGui.QApplication ( sys.argv )
    app.setApplicationName( mks.core.defines.PACKAGE_NAME )
    app.setOrganizationName( mks.core.defines.PACKAGE_ORGANISATION )
    app.setOrganizationDomain( mks.core.defines.PACKAGE_URL )
    app.lastWindowClosed.connect(app.quit)

    if profiler is not None:
        profiler.stepDone('Construct application')

    # init monkey studio core
    from mks.core.core import core
    core.init(profiler)

    if cmdLine["files"]:
        for filePath in cmdLine["files"]:
            if os.path.exists(filePath):
                if "firstFileLineToGo" in cmdLine:
                    # -1 to convert from users to internal indexing
                    core.workspace().goTo(filePath, line=cmdLine["firstFileLineToGo"] - 1)
                    del cmdLine["firstFileLineToGo"]
                else:
                    core.workspace().openFile(filePath)
            else:
                core.workspace().createEmptyNotSavedDocument(filePath)
    else:
        if core.workspace().textEditorClass():
            core.workspace().createEmptyNotSavedDocument()

    if profiler is not None:
        profiler.stepDone('Open files')

    if not cmdLine["no-session"]:
        core.restoreSession.emit()

    if profiler is not None:
        profiler.stepDone('Restore session')

    if core.workspace().currentDocument():
        core.workspace().currentDocument().setFocus()
    
    core.mainWindow().loadState()
    if profiler is not None:
        profiler.stepDone('Load state')

    core.mainWindow().show()
    
    if profiler is not None:
        profiler.stepDone('Show main window')

    # execute application
    if profiler is None:
        result = app.exec_()
    else:
        result = 0

    core.term()

    if profiler is not None:
        profiler.stepDone('Terminate core')

    if profiler is not None:
        profiler.printInfo()

    return result

if __name__ == '__main__':
    sys.exit(main())

