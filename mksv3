#!/usr/bin/env python
"""
Monkey Studio free crossplatform IDE.
Main file processes command line arguments and starts the system.
"""
import sys
import os.path
import traceback
import logging
import logging.handlers

from PyQt4.QtGui import QMessageBox

import mks.core.defines

helpString = \
"""
Usage:
\t%s [options] [FILE1 [FILE2 ...]]

Command line arguments:
\t-h, --help      Show command line help
\t-v, --version   Show program version
"""


def showHelp():
    showVersion()
    print helpString % sys.argv[0]
    

def showVersion():
    print "%s version %s" % (mks.core.defines.PACKAGE_NAME, mks.core.defines.PACKAGE_VERSION)
    print mks.core.defines.PACKAGE_COPYRIGHTS
    print "http://%s" % mks.core.defines.PACKAGE_DOMAIN

def excepthook(excepttype, exceptvalue, tracebackobj):
    """Show exception dialog, write to log
    """
    text = ''.join(traceback.format_exception(excepttype, exceptvalue, tracebackobj)).strip()
    logging.critical(text)
    
    mailto = '<a href="mailto:hlamer@tut.by?subject=Crash&body=asdf">mailto:hlamer@tut.by</a>'
    
    mboxText =  'Exception occured.<br/>' + \
                'MkS team tries to avoid such problems and make mksv3 stable<br/>' + \
                'To help us <font color="red">send please a bug report to the developers</font><br/>' + \
                mailto + '<br/>' + \
                '<br/>' + \
                'Include your description and this text:<br/>' + \
                '<br/>' + \
                text.replace('\n', '<br/>\n')
    
    QMessageBox.critical(None, 'Oops. Internal exception', mboxText)


def _configureLogging():
    logging.basicConfig(level=logging.ERROR)
    consoleLogger = logging.StreamHandler()
    logging.getLogger('').addHandler(consoleLogger)
    fileHandler = logging.handlers.RotatingFileHandler('/tmp/mksv3.log', 'a', 100 * 1024, 1)
    logging.getLogger('').addHandler(fileHandler)

def main():
    if '-v' in sys.argv or '--version' in sys.argv:
        showVersion()
        return 0
    
    if '-h' in sys.argv or '--help' in sys.argv:
        showHelp()
        return 0
    
    try:
        import PyQt4
    except ImportError:
        print >> sys.stderr, 'Failed to import PyQt4 bindings'
        print >> sys.stderr, 'Try to install python-qt4 package, or download sources from ' + \
                             'http://www.riverbankcomputing.co.uk/pyqt/download'
        return -1

    import PyQt4.QtGui
    app = PyQt4.QtGui.QApplication ( sys.argv )
    
    _configureLogging()
    sys.excepthook = excepthook
    
    try:
        import PyQt4.Qsci
    except ImportError:
        from PyQt4.QtGui import QMessageBox
        QMessageBox.critical(None, "QScintilla not found",
                                "Failed to import QScintilla 2 python bindings.\n"
                                "Try to install python-qscintilla2 package, or download sources from "
                                "See https://github.com/pasnox/fresh for installation instructions")
        return -1
    
    try:
        import PyQt4.fresh
    except ImportError, ex:
        from PyQt4.QtGui import QMessageBox
        QMessageBox.critical(None, "Fresh not found",
                                "Failed to import Fresh framework. Probably it is not installed.\n" +
                                str(ex) + '\n' +
                                "Check for installation instructions "
                                "http://bettercodes.org/projects/fresh")
        return -1
    
    # Imports only here. Hack for ability to get help and version info even on system without PyQt and Fresh.
    from mks.core.core import core
    
    app.setApplicationName( mks.core.defines.PACKAGE_NAME );
    app.setOrganizationName( mks.core.defines.PACKAGE_ORGANISATION );
    app.setOrganizationDomain( mks.core.defines.PACKAGE_DOMAIN );
    
    app.lastWindowClosed.connect(app.quit)
    
    # init monkey studio core
    core.init();

    # Get list of absolute pathes of files to open. List may contain not existing files

    filePathes = [os.path.abspath(arg) for arg in sys.argv[1:]]

    if filePathes:
        for file in filePathes:
            core.workspace().openFile(file)
    else:
        core.workspace().createEmptyNotSavedDocument();

    if core.workspace().currentDocument():
        core.workspace().currentDocument().setFocus()
    
    core.mainWindow().show()
    
    # execute application
    result = app.exec_()
    core.term()
    
    return result

if __name__ == '__main__':
    sys.exit(main())
