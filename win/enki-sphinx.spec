# .. -*- mode: python -*-
#
# ****************
# enki-sphinx.spec
# ****************
# This file is instructors Pyinstaller to build a binary containing both Enki
# and Sphinx executables.
#
# Procedure to create this file:
#
# #. Run ``win\build_exe.bat`` and test. This creates a working
#    ``enki.spec`` file.
# #. Run ``pyinstaller win\sphinx-build.py`` and test. This creates
#    a working ``sphinx.spec`` file.
# #. Combine these files according to the `Pyinstaller merge docs
#    <http://htmlpreview.github.io/?https://github.com/pyinstaller/pyinstaller/blob/develop/doc/Manual.html#multipackage-bundles>`_.
#    These steps are illustrated in the comments below.

block_cipher = None

# Per the `Pyinstaller merge docs`_, first create uniquely-named analysis
# objects for both programs.
enki_a = Analysis(['bin\\enki'],
             # I don't particularly like an absolute path. Can it be made
             # relative? The autogenerated .spec files have an absolute path.
             pathex=['C:\\Users\\bjones\\Documents\\enki_all\\enki1'],
             hiddenimports=[],
             hookspath=['win'],
             runtime_hooks=['win\\rthook_pyqt4.py'],
             # Per  Hartmut on 24-Sep-2014 on the Pyinstaller e-mail list:
             # "An optional list of module or package names (their Python names,
             # not path names) that will be ignored (as though they were not
             # found)."
             excludes=['_tkinter'],
             cipher=block_cipher)
sphinx_a = Analysis(['win\\sphinx-build.py'],
             pathex=['C:\\Users\\bjones\\Documents\\enki_all\\enki1'],
             hiddenimports=['CodeChat.CodeToRestSphinx', 'CodeChat.CodeToRest', 'CodeChat.LanguageSpecificOptions' ],
             hookspath=None,
             runtime_hooks=None,
             excludes=['_tkinter'],
             cipher=block_cipher)

# Next, eliminate duplicate libraries and modules. Listing Enki first seems to
# place all libraries and modules there.
MERGE( (enki_a, 'enki', 'enki'), (sphinx_a, 'sphinx', 'sphinx') )

# Finally, produce both binaries. Note that the resulting Sphinx binary doesn't
# work as is, since it has no libraries bundled with it. Instead, it needs to
# be copied to the Enki directory before being executed.
enki_pyz = PYZ(enki_a.pure,
             cipher=block_cipher)
enki_exe = EXE(enki_pyz,
          enki_a.scripts,
          exclude_binaries=True,
          name='enki.exe',
          debug=False,
          strip=None,
          upx=True,
          console=False , icon='icons\\logo\\enki.ico')
enki_coll = COLLECT(enki_exe,
               enki_a.binaries,
               enki_a.zipfiles,
               enki_a.datas,
               strip=None,
               upx=True,
               name='enki')

sphinx_pyz = PYZ(sphinx_a.pure,
             cipher=block_cipher)
sphinx_exe = EXE(sphinx_pyz,
          sphinx_a.scripts,
          exclude_binaries=True,
          name='sphinx-build.exe',
          debug=False,
          strip=None,
          upx=True,
          console=True )
sphinx_coll = COLLECT(sphinx_exe,
               sphinx_a.binaries,
               sphinx_a.zipfiles,
               sphinx_a.datas,
               strip=None,
               upx=True,
               name='sphinx-build')
